#!/usr/bin/env python

"""
autosig.py

Generates the System Implementation Guide.

Copyright (c) 2016  Nexenta Systems
William Kettler <william.kettler@nexenta.com>
Pete Hartman <pete.hartman@nexenta.com>
"""

import os
import sys
import subprocess
import signal
import getopt
import simplejson
import time
import logging


# Logger
logger = logging.getLogger()


# Define globals for convenience and to avoid complex passing
version = "0.16"
output_d = "/var/tmp/go-live"
collector = []
sig = None
global_ignore = False
partner_node = None
this_node = None


def usage():
    """
    Print usage.

    Inputs:
        None
    Outputs:
        None
    """
    cmd = sys.argv[0]

    print "%s [-h] [-c CONFIG] [-C COLLECTORDIR] [-i]" % cmd
    print ""
    print "Nexenta Auto-SIG"
    print ""
    print "Arguments:"
    print ""
    print "    -h, --help           print usage"
    print "    -c, --config         config file"
    print "    -C, --collector      collector directory"
    print "    -i, --ignore         ignore errors"


class Timeout(Exception):
    pass


class Execute(Exception):
    pass


def alarm_handler(signum, frame):
    raise Timeout


def execute(cmd, timeout=None):
    """
    Execute a command in the default shell. If a timeout is defined the command
    will be killed if the timeout is exceeded.

    Inputs:
        cmd     (str): Command to execute
        timeout (int): Command timeout in seconds
    Outputs:
        retcode  (int): Return code
        output  (list): STDOUT/STDERR
    """
    # Define the timeout signal
    if timeout:
        signal.signal(signal.SIGALRM, alarm_handler)
        signal.alarm(timeout)

    try:
        # Execute the command and wait for the subprocess to terminate
        # STDERR is redirected to STDOUT
        phandle = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT)

        # Read the stdout/sterr buffers and retcode
        stdout, stderr = phandle.communicate()
        retcode = phandle.returncode
    except Timeout, t:
        # Kill the running process
        phandle.kill()
        raise Timeout("command timeout of %ds exceeded" % timeout)
    except Exception, err:
        raise Execute(err)
    else:
        # Possible race condition where alarm isn't disabled in time
        signal.alarm(0)

    # stdout may be None and we need to acct for it
    if stdout and stdout is not None:
        output = stdout.strip()
    else:
        output = None

    return retcode, output


def execute_collector(location, bundle, ignore):
    """
    Read data from collector as defined in the config file and write it to
    the SIG document.

    Inputs:
        location (str): Relative path to collector file to read
        bundle   (str): Absolute path to collector bundle
        ignore  (bool): Ignore return code
        timeout  (int): Command timeout in seconds
    Outputs:
        None
    """
    f = os.path.join(bundle, location)
    try:
        output = open(f, "r").read()
    except Exception, err:
        logger.error("Could not read file \"%s\"" % f)
        logger.error(str(err))
        if not ignore:
            logger.info("The '-i' option can be used to ignore errors")
            sys.exit(1)

    sig.print_hostname(collector_hostname(bundle))
    sig.print_output(output)


def execute_cmd(cmd, ignore, timeout=None):
    """
    Execute a command as defined in the config file and write it to the SIG
    document.

    Inputs:
        cmd     (str): Command to execute
        ignore (bool): Ignore return code
        timeout (int): Command timeout in seconds
    Outputs:
        None
    """
    try:
        retcode, output = execute(cmd, timeout=timeout)
    except Exception, err:
        logger.error("Command execution failed \"%s\"" % cmd)
        logger.error(str(err))
        if not ignore:
            sys.exit(1)

    # Check the command return code
    if retcode:
        logger.error("Command execution failed \"%s\"" % cmd)
        logger.error(output)
        if not ignore:
            logger.info("The '-i' option can be used to ignore errors")
            sys.exit(1)

    sig.print_hostname(this_node)
    sig.print_output(output)


def execute_nmc(cmd, ignore, timeout=None):
    """
    Execute an NMC command as defined in the config file and write it to the
    SIG document.

    Inputs:
        cmd     (str): NMC command to execute
        ignore (bool): Ignore return code
        timeout (int): Command timeout in seconds
    Outputs:
        None
    """
    nmc = "nmc -c \"%s\"" % cmd
    try:
        retcode, output = execute(nmc, timeout=timeout)
    except Exception, err:
        logger.error("NMC command execution failed \"%s\"" % cmd)
        logger.error(str(err))
        if not ignore:
            sys.exit(1)

    # Check the command return code
    if retcode:
        logger.error("NMC command execution failed \"%s\"" % cmd)
        logger.error(output)
        if not ignore:
            logger.info("The '-i' option can be used to ignore errors")
            sys.exit(1)

    sig.print_hostname(this_node)
    sig.print_output(output)


def ssh(cmd, host, ignore, timeout=None):
    """
    Execute a command on a remote host as defined in the config file and write
    it to the SIG document.

    Inputs:
        cmd     (str): Command to execute
        host    (str): Remote host
        ignore (bool): Ignore return code
        timeout (int): Command timeout in seconds
    Output:
        None
    """
    ssh_cmd = "ssh %s '%s'" % (host, cmd)
    try:
        retcode, output = execute(ssh_cmd, timeout)
    except Exception, err:
        logger.error("SSH command execution failed \"%s\"" % cmd)
        logger.error(str(err))
        if not ignore:
            sys.exit(1)

    # Check the command return code
    if retcode:
        logger.error("SSH command execution failed \"%s\"" % cmd)
        logger.error(output)
        if not ignore:
            logger.info("The '-i' option can be used to ignore errors")
            sys.exit(1)

    sig.print_hostname(partner_node)
    sig.print_output(output)


def ssh_nmc(cmd, host, ignore, timeout=None):
    """
    Execute an NMC command on a remote host as defined in the config file
    and write it to the SIG document.

    Inputs:
        cmd     (str): NMC command to execute
        host    (str): Remote host
        ignore (bool): Ignore return code
        timeout (int): Command timeout in seconds
    Outputs:
        None
    """
    nmc = "nmc -c \"%s\"" % cmd
    ssh_nmc = "ssh %s '%s'" % (host, nmc)
    try:
        retcode, output = execute(ssh_nmc, timeout)
    except Exception, err:
        logger.error("SSH NMC command execution failed \"%s\"" % cmd)
        logger.error(str(err))
        if not ignore:
            sys.exit(1)

    # Check the command return code
    if retcode:
        logger.error("SSH NMC command execution failed \"%s\"" % cmd)
        logger.error(output)
        if not ignore:
            logger.info("The '-i' option can be used to ignore errors")
            sys.exit(1)

    sig.print_hostname(partner_node)
    sig.print_output(output)


class Document:

    def __init__(self, f, stdout=False):
        self.stdout = stdout
        self.fh = open(f, 'w')

    def _write(self, s):
        """
        Wrapper function for the write method.

        Inputs:
            s (str): String
        Output:
            None
        """
        self.fh.write(s)
        self.fh.flush()

        # Write to stdout if defined
        if self.stdout:
            sys.stdout.write(s)
            sys.stdout.flush()

    def print_title(self, s):
        """
        Format and print title.

        Inputs:
            s (str): Title
        Outputs:
            None
        """
        self._write('\n')
        self._write('%s\n' % s)
        self._write('%s\n' % ('=' * len(s)))
        self._write('\n')

    def print_section(self, s):
        """
        Format and print section title.

        Inputs:
            s (str): Section title
        Outputs:
            None
        """
        self._write('\n')
        self._write('%s\n' % s)
        self._write('%s\n' % ('-' * len(s)))
        self._write('\n')

    def print_sub_section(self, s, level=0):
        """
        Format and print sub-section title.

        Inputs:
            s (str): Sub-section title
            level (int): Sub-section level`
        Outputs:
            None
        """
        self._write('\n')
        self._write('%s### %s %s###\n' % ('#' * level, s, '#' * level))
        self._write('\n')

    def print_string(self, s):
        """
        Format and print a string.

        Inputs:
            s (str): String
        Outputs:
            None
        """
        self._write('%s\n' % s)

    def print_hostname(self, h):
        """
        Format and print a hostname.

        Inputs:
            h (str): Hostname
        Outputs:
            None
        """
        self._write('**%s**\n' % h)
        self._write('\n')

    def print_version(self, v):
        """
        Format and print a version string.

        Inputs:
            v (str): Version string
        Outputs:
            None
        """
        self._write('*%s*\n' % v)
        self._write('\n')

    def print_command(self, c):
        """
        Format and print a command string.

        Inputs:
            c (str): Command
        Outputs:
            None
        """
        self._write('[`%s`]\n' % c)
        self._write('\n')

    def print_paragraph(self, p):
        """
        Format and print a paragraph.

        Inputs:
            p (str): Paragraph
        Outputs:
            None
        """
        self._write('%s\n' % p)
        self._write('\n')

    def print_output(self, o):
        """
        Format and print command output.

        Inputs:
            o (str): Output
        Outputs:
            None
        """
        self._write('~~~\n')
        self._write('%s\n' % o)
        self._write('~~~\n')
        self._write('\n')

    def print_newline(self):
        """
        Print newline.

        Inputs:
            None
        Outputs:
            None
        """
        self._write('\n')

    def __exit__(self):
        # Close file
        if fh is not sys.stdout:
            self.fh.close()


def collector_hostname(bundle):
    """
    Return hostname from collector bundle path.

    Inputs:
        bundle (str): Collector bundle path
    Outputs:
        hostname (str): Bundle hostname
    """
    bundle = os.path.basename(bundle.rstrip(os.path.sep))
    hostname = "_".join(bundle.split("_")[1:-1])

    return hostname


def hostname():
    """
    Return the system hostname.

    Inputs:
        None
    Outputs:
        hostname (str): System hostname
    """
    if collector:
        retcode, hostname = execute("cat %s/network/nodename" % collector)
    else:
        retcode, hostname = execute("hostname")
    if retcode:
        logger.error("failed to get system hostname")
        logger.error(output)
        sys.exit(1)

    return hostname.strip()


def rsf_partner():
    """
    Return cluster partner hostname.

    Inputs:
        None
    Outputs:
        partner (str): Partner hostname
    """
    rsfcli = "/opt/HAC/RSF-1/bin/rsfcli -i0"
    hosts = []
    partner = None
    name = None

    # First try to determine if the cluster is configured.
    # 4.x makes determination tricky because the service is installed
    # and running by default.

    # Make sure services are running
    try:
        retcode, output = execute("%s isrunning" % rsfcli)
    except Exception, err:
        logger.error("unable to determine RSF service state")
        logger.error(output)
        sys.exit(1)

    # Non-zero return code means service is not running
    if retcode:
        logger.info("RSF service is not running")
        return partner

    logger.info("RSF service is running")

    # Parse the RSF status
    retcode, output = execute("/opt/HAC/RSF-1/bin/rsfcli status")
    for l in output.splitlines():
        if l.startswith("Contacted"):
            name = l.split()[4].rstrip(",").strip("\"")
        elif l.startswith("Host"):
            hosts.append(l.split()[1].strip())

    # Check for default 4.x configuration
    if name == "Ready_For_Cluster_Configuration":
        logger.info("Cluster is not configured")
        return partner

    logger.info("RSF cluster is configured")

    # Determine which clustered host is the partner
    for h in hosts:
        if h != this_node:
            partner = h
            logger.info("%s is partner node" % partner)
            break

    return partner


def sections(section, level):
    """
    Iterate over a section.

    Inputs:
        section
        level
    Outputs:
        None
    """
    # Valid keys
    valid = ["_version", "title", "enabled", "paragraph", "cmd", "nmc",
             "sections", "collector", "ignore"]
    # Required keys
    required = ["title", "enabled"]

    # Iterate over each sub-section
    for subsection in section:
        # Verify required keys are present
        for key in required:
            if key not in subsection:
                logger.error("Required key \"%s\" missing" % key)
                sys.exit(1)

        # Verify there are no unsupported keys present
        for key in subsection:
            if key not in valid:
                logger.error("Invalid key \"%s\"" % key)
                sys.exit(1)

        # Continue if the section is disabled
        if not subsection["enabled"]:
            continue

        # Handle version number
        # Should only be present in root of JSON file
        if "_version" in subsection:
            conf_version = subsection["_version"]
            logger.info("Configuration v%s" % conf_version)
            sig.print_version("Configuration v%s" % conf_version)

        # Handle title
        title = subsection["title"]
        logger.info("Section \"%s\"" % title)
        if level == 0:
            sig.print_title(title)
        elif level == 1:
            sig.print_section(title)
        else:
            sig.print_sub_section(title, level-2)

        # Handle paragraph
        if "paragraph" in subsection:
            paragraph = subsection["paragraph"]
            if paragraph is not None:
                sig.print_paragraph(paragraph)

        # Check if ignore is defined
        if "ignore" in subsection:
            logger.info("Ignoring exit code")
            ignore = subsection["ignore"] or global_ignore
        else:
            ignore = global_ignore

        # Handle collector fields: alternative to both cmd and nmc
        if len(collector) != 0:
            if "collector" in subsection:
                location = subsection["collector"]

                if location is not None:
                    sig.print_command(location)
                    for c in collector:
                        execute_collector(location, c, ignore)
            else:
                logger.warn("Collector generation specified but section "
                            "\"%s\" has no collector subsection" % title)
        else:
            # Handle command
            if "cmd" in subsection:
                cmd = subsection["cmd"]

                if cmd is not None:
                    sig.print_command(cmd)
                    # Execute on this node
                    execute_cmd(cmd, ignore)
                    # Execute on remote node
                    if partner_node is not None:
                        ssh(cmd, partner_node, ignore)

            # Handle nmc
            if "nmc" in subsection:
                nmc = subsection["nmc"]

                if nmc is not None:
                    sig.print_command(nmc)
                    # Execute on this node
                    execute_nmc(nmc, ignore)
                    # Execute on the remote node
                    if partner_node is not None:
                        ssh_nmc(nmc, partner_node, ignore)

        # Handle sections
        if "sections" in subsection:
            sections(subsection["sections"], level + 1)


def main():
    # Initialize variables
    level = logging.INFO
    global sig
    global collector
    global global_ignore
    global partner_node
    global this_node
    config = "autosig.json"

    # Define the command line arguments
    try:
        opts, args = getopt.getopt(sys.argv[1:], ":hc:C:id",
                                   ["config=", "collector=", "ignore"])
    except getopt.GetoptError, err:
        logger.error(str(err))
        usage()
        sys.exit(2)

    # Parse the command line arguments
    for o, a in opts:
        if o in ("-h"):
            usage()
            sys.exit()
        elif o in ("-c", "--config"):
            config = a
        elif o in ("-C", "--collector"):
            collector.append(a)
        elif o in ("-i", "--ignore"):
            global_ignore = True
        elif o in ("-d"):
            level = logging.DEBUG

    # Create output directory
    if not os.path.exists(output_d):
        try:
            os.mkdir(output_d)
        except IOError, i:
            print str(i)
            sys.exit(1)

    # Logging config
    logging.basicConfig(format="%(asctime)s [%(levelname)s] %(message)s",
                        level=level, datefmt='%Y-%m-%d %I:%M:%S')

    # Open the configuration file
    try:
        fh = open(config)
    except Exception, err:
        logger.error("Failed to open the config file")
        logger.error(str(err))
        sys.exit(1)

    # Parse the configuration file
    try:
        outline = simplejson.load(fh, encoding=None, cls=None,
                                  object_hook=None)
    except Exception, err:
        logger.error("Failed to parse the config file")
        logger.error(str(err))
        sys.exit(1)
    finally:
        fh.close()

    if collector:
        # Test existence to prevent confusing errors downstream
        for c in collector:
            if not os.path.isdir(c):
                logger.error("No collector directory '%s'" % collector)
                sys.exit(1)

        hosts = map(collector_hostname, collector)
    else:
        this_node = hostname()
        partner_node = rsf_partner()

        hosts = [x for x in [this_node, partner_node] if x is not None]

    # Open the output file
    output_f = "nexenta-autosig-%s.txt" % "-".join(hosts)
    output = os.path.join(output_d, output_f)
    sig = Document(output)
    logger.info("Writing output to %s" % output)

    # Write the version number
    logger.info("Auto-SIG v%s" % version)
    sig.print_version("Auto-SIG v%s" % version)

    # Write collector bundle names
    if len(collector) != 0:
        sig.print_newline()
        for c in collector:
            sig.print_string(c)

    # Iterate over the document sections
    level = 0
    sections([outline], level)

    logger.info("Output written to %s" % output)
    logger.info("Complete!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Killed by user")
